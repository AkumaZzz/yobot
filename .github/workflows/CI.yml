name: ci

on:
  push:
    branches:
      - master
    paths:
      - src/client/**
  pull_request:
    types:
      - opened
      - edited
      - synchronize

jobs:
  build-windows:
    runs-on: windows-2019
    name: build windows binary

    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Dependencies
        uses: actions/cache@v2
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install Dependencies
        shell: cmd
        run: |
          cd .\src\client
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Run Test
        shell: cmd
        run: |
          cd .\src\client
          python main_test.py

      - name: Build exe binary and archive
        shell: cmd
        run: |
          cd .\src\client
          sed -e "s/\"\[v.*semver$/\"[test-$(git rev-list --count HEAD)-${{ github.sha }}]\"/" -i.bak yobot.py
          PYTHONOPTIMIZE=0
          pyinstaller main.spec

      - name: Upload Artifact
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: windows-executable
          path: ./src/client/dist/yobot.exe

  upload:
    runs-on: ubuntu-20.04
    if: ${{ github.event_name != 'pull_request' }}
    needs: build-windows
    name: upload binary

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: windows-executable

      - name: Initial rclone configuration
        run: echo $RCLONE_CONF>rclone.conf
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}

      - name: Upload
        uses: docker://rclone/rclone:1
        with:
          args: --config rclone.conf copy yobot.exe remote:pan/yobot/test/${{ github.run_id }}/
